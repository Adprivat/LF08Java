========================================================
  ERKLÄRUNG DER LUFTFAHRZEUG-VERWALTUNGSANWENDUNG (GUI-VERSION)
========================================================

Diese Dokumentation erklärt den Aufbau, die Struktur und die Funktionsweise der Java-GUI-Anwendung zur Verwaltung von Luftfahrzeugen.

1. ÜBERSICHT
========================================================

Die Anwendung wurde nach dem objektorientierten Paradigma entwickelt und nutzt Konzepte wie:
- Vererbung
- Abstraktion
- Polymorphismus
- Datenkapselung
- Event-basierte Programmierung (GUI)

Das Programm besteht aus fünf Klassen:
- Luftfahrzeug (abstrakte Basisklasse)
- Flugzeug (Ableitung von Luftfahrzeug)
- Heissluftballon (Ableitung von Luftfahrzeug)
- LuftfahrzeugVerwaltung (Verwaltungsklasse)
- Main (GUI-Hauptklasse mit Swing-Interface)

2. KLASSENSTRUKTUR IM DETAIL
========================================================

2.1 ABSTRAKTE BASISKLASSE: LUFTFAHRZEUG
--------------------------------------------------------

Die abstrakte Klasse Luftfahrzeug definiert die gemeinsamen Eigenschaften aller Luftfahrzeuge.

Zugriffsmodifikatoren:
- public abstract class Luftfahrzeug: Die Klasse ist öffentlich zugänglich und als abstrakt definiert, was bedeutet, dass keine direkten Instanzen dieser Klasse erzeugt werden können.

Attribute (alle private, um Datenkapselung zu gewährleisten):
- private String bezeichnung: Der Name des Luftfahrzeugs.
- private double gewicht: Das Gewicht des Luftfahrzeugs in Kilogramm.
- private int baujahr: Das Herstellungsjahr des Luftfahrzeugs.

Konstruktoren:
- public Luftfahrzeug(): Standardkonstruktor, der die Attribute mit Standardwerten initialisiert.
- public Luftfahrzeug(String bezeichnung, double gewicht, int baujahr): Parametrisierter Konstruktor, der die Attribute mit übergebenen Werten initialisiert.

Getter-Methoden (Zugriffsmethoden):
- public String getBezeichnung(): Gibt den Wert des Attributs "bezeichnung" zurück.
- public double getGewicht(): Gibt den Wert des Attributs "gewicht" zurück.
- public int getBaujahr(): Gibt den Wert des Attributs "baujahr" zurück.

Setter-Methoden (Änderungsmethoden):
- public void setBezeichnung(String bezeichnung): Setzt den Wert des Attributs "bezeichnung".
- public void setGewicht(double gewicht): Setzt den Wert des Attributs "gewicht".
- public void setBaujahr(int baujahr): Setzt den Wert des Attributs "baujahr".

Weitere Methoden:
- public String getDaten(): Gibt eine formatierte Zeichenkette zurück, die alle Attribute des Luftfahrzeugs enthält.

2.2 ABGELEITETE KLASSE: FLUGZEUG
--------------------------------------------------------

Die Klasse Flugzeug erbt von der abstrakten Klasse Luftfahrzeug und erweitert diese um flugzeugspezifische Eigenschaften.

Zugriffsmodifikatoren:
- public class Flugzeug extends Luftfahrzeug: Die Klasse ist öffentlich zugänglich und erbt von Luftfahrzeug.

Attribute (alle private):
- private double spannweite: Die Spannweite der Flügel in Metern.
- private int motorenAnzahl: Die Anzahl der Motoren des Flugzeugs.

Konstruktoren:
- public Flugzeug(): Standardkonstruktor, der den Konstruktor der übergeordneten Klasse aufruft und zusätzliche Attribute initialisiert.
- public Flugzeug(String bezeichnung, double gewicht, int baujahr, double spannweite, int motorenAnzahl): Parameterisierter Konstruktor, der den Konstruktor der übergeordneten Klasse mit Parametern aufruft und zusätzliche Attribute initialisiert.

Getter-Methoden:
- public double getSpannweite(): Gibt den Wert des Attributs "spannweite" zurück.
- public int getAnzahlMotoren(): Gibt den Wert des Attributs "motorenAnzahl" zurück.

Setter-Methoden:
- public void setSpannweite(double spannweite): Setzt den Wert des Attributs "spannweite".
- public void setAnzahlMotoren(int motorenAnzahl): Setzt den Wert des Attributs "motorenAnzahl".

Überschriebene Methoden:
- @Override public String getDaten(): Überschreibt die Methode der Basisklasse, ruft diese mit super.getDaten() auf und erweitert die Rückgabe um flugzeugspezifische Informationen.

2.3 ABGELEITETE KLASSE: HEISSLUFTBALLON
--------------------------------------------------------

Die Klasse Heissluftballon erbt von der abstrakten Klasse Luftfahrzeug und erweitert diese um ballonspezifische Eigenschaften.

Zugriffsmodifikatoren:
- public class Heissluftballon extends Luftfahrzeug: Die Klasse ist öffentlich zugänglich und erbt von Luftfahrzeug.

Attribute (alle private):
- private double ballonVolumen: Das Volumen des Ballons in Kubikmetern.
- private double korbhoehe: Die Höhe des Korbs in Metern.

Konstruktoren:
- public Heissluftballon(): Standardkonstruktor, der den Konstruktor der übergeordneten Klasse aufruft und zusätzliche Attribute initialisiert.
- public Heissluftballon(String bezeichnung, double gewicht, int baujahr, double ballonVolumen, double korbhoehe): Parameterisierter Konstruktor, der den Konstruktor der übergeordneten Klasse mit Parametern aufruft und zusätzliche Attribute initialisiert.

Getter-Methoden:
- public double getBallonVolumen(): Gibt den Wert des Attributs "ballonVolumen" zurück.
- public double getKorbhoehe(): Gibt den Wert des Attributs "korbhoehe" zurück.

Setter-Methoden:
- public void setBallonVolumen(double ballonVolumen): Setzt den Wert des Attributs "ballonVolumen".
- public void setKorbhoehe(double korbhoehe): Setzt den Wert des Attributs "korbhoehe".

Überschriebene Methoden:
- @Override public String getDaten(): Überschreibt die Methode der Basisklasse, ruft diese mit super.getDaten() auf und erweitert die Rückgabe um ballonspezifische Informationen.

2.4 VERWALTUNGSKLASSE: LUFTFAHRZEUGVERWALTUNG
--------------------------------------------------------

Diese Klasse dient als Verwaltungsschicht für Luftfahrzeuge und bietet Methoden zum Hinzufügen, Entfernen und Abfragen von Luftfahrzeugen.

Zugriffsmodifikatoren:
- public class LuftfahrzeugVerwaltung: Die Klasse ist öffentlich zugänglich.

Attribute:
- private List<Luftfahrzeug> luftfahrzeuge: Eine Liste, die alle verwalteten Luftfahrzeuge enthält. Private Zugriff sorgt für Datenkapselung.

Konstruktor:
- public LuftfahrzeugVerwaltung(): Initialisiert die Liste der Luftfahrzeuge als leere ArrayList.

Methoden:
- public void addLuftfahrzeug(Luftfahrzeug luftfahrzeug): Fügt ein neues Luftfahrzeug zur Liste hinzu.
- public boolean removeLuftfahrzeug(int index): Entfernt ein Luftfahrzeug an der angegebenen Position aus der Liste. Gibt true zurück, wenn erfolgreich.
- public Luftfahrzeug getLuftfahrzeug(int index): Gibt das Luftfahrzeug an der angegebenen Position zurück.
- public List<Luftfahrzeug> getAlleLuftfahrzeuge(): Gibt eine Kopie der Liste aller Luftfahrzeuge zurück.
- public int getAnzahlLuftfahrzeuge(): Gibt die Anzahl der verwalteten Luftfahrzeuge zurück.

2.5 GUI-HAUPTKLASSE: MAIN
--------------------------------------------------------

Die Main-Klasse implementiert die grafische Benutzeroberfläche mit Java Swing und erbt von JFrame.

Zugriffsmodifikatoren:
- public class Main extends JFrame: Die Klasse ist öffentlich zugänglich und erbt von JFrame.

Attribute:
- private static LuftfahrzeugVerwaltung verwaltung: Eine Instanz der Verwaltungsklasse.
- private JList<String> luftfahrzeugListe: Eine Swing-Komponente zur Anzeige der Luftfahrzeuge.
- private DefaultListModel<String> listModel: Das Datenmodell für die Liste.
- private JTextArea detailAnzeige: Eine Swing-Komponente zur Anzeige der Details.

Konstruktor:
- public Main(): Initialisiert das GUI-Fenster, erstellt alle Swing-Komponenten und setzt das Layout.

GUI-Komponenten:
- Hauptfenster (JFrame) mit BorderLayout
- Linke Seite:
  * Scrollbare Liste der Luftfahrzeuge (JList in JScrollPane)
  * Button-Panel mit Aktionen (GridLayout)
- Rechte Seite:
  * Scrollbare Detailansicht (JTextArea in JScrollPane)
- Dialog-Fenster für neue Luftfahrzeuge:
  * Formular mit Textfeldern
  * Typ-Auswahl (JComboBox)
  * OK/Abbrechen Buttons

Event-Handler:
- Button-Aktionen für:
  * Details anzeigen
  * Neues Luftfahrzeug anlegen
  * Luftfahrzeug löschen
  * Liste aktualisieren
- ComboBox-Aktion für dynamische Anpassung der Formularfelder
- Dialog-Button-Aktionen für:
  * Speichern neuer Luftfahrzeuge
  * Abbrechen der Eingabe

Hauptmethode:
- public static void main(String[] args): Startet die GUI-Anwendung im Event-Dispatch-Thread.

3. GUI-LAYOUT UND INTERAKTION
========================================================

Das GUI ist in zwei Hauptbereiche unterteilt:

3.1 LINKER BEREICH
--------------------------------------------------------

- Eine scrollbare Liste zeigt alle Luftfahrzeuge an
- Darunter befinden sich vier Buttons für die Hauptfunktionen:
  * "Details anzeigen": Zeigt Details des ausgewählten Luftfahrzeugs
  * "Neu": Öffnet einen Dialog zum Anlegen eines neuen Luftfahrzeugs
  * "Löschen": Entfernt das ausgewählte Luftfahrzeug
  * "Liste aktualisieren": Aktualisiert die Anzeige der Luftfahrzeuge

3.2 RECHTER BEREICH
--------------------------------------------------------

- Eine scrollbare Textfläche zeigt die Details des ausgewählten Luftfahrzeugs
- Die Anzeige wird automatisch aktualisiert, wenn ein Luftfahrzeug ausgewählt wird

3.3 DIALOG FÜR NEUE LUFTFAHRZEUGE
--------------------------------------------------------

- Ein modales Dialogfenster erscheint beim Klick auf "Neu"
- Enthält ein Formular mit:
  * Typ-Auswahl (Flugzeug/Heißluftballon)
  * Allgemeine Daten (Bezeichnung, Gewicht, Baujahr)
  * Typspezifische Daten (dynamisch angepasst)
- Buttons zum Speichern oder Abbrechen
- Validierung der Eingaben

4. FEHLERBEHANDLUNG
========================================================

Die GUI-Version implementiert erweiterte Fehlerbehandlung:

- Validierung von Benutzereingaben in Formularen
- Fehlermeldungen in Dialogfenstern
- Bestätigungsdialoge für kritische Aktionen
- Exception-Handling für ungültige Eingaben
- Benutzerfreundliche Fehlermeldungen

5. BENUTZERFREUNDLICHKEIT
========================================================

Die GUI-Version bietet mehrere Verbesserungen:

- Intuitive Benutzeroberfläche
- Visuelle Rückmeldung bei Aktionen
- Einfache Navigation durch Buttons
- Dynamische Anpassung der Eingabefelder
- Scrollbare Bereiche für lange Inhalte
- Klare Beschriftungen und Anweisungen

6. ZUSAMMENFASSUNG
========================================================

Die GUI-Version der Luftfahrzeug-Verwaltungsanwendung demonstriert:

- Objektorientierte Programmierung mit Java
- GUI-Entwicklung mit Swing
- Event-basierte Programmierung
- Datenkapselung und Vererbung
- Benutzerfreundliche Fehlerbehandlung
- Modulare und erweiterbare Architektur

Die Anwendung bietet eine intuitive Benutzeroberfläche für die Verwaltung von Luftfahrzeugen, die sowohl für gelegentliche als auch für regelmäßige Nutzung geeignet ist. 